- hosts: localhost
  gather_facts: yes
  vars:      
      chassis_password:  "{{ instackenv_content.nodes[0].pm_password }}"
      osp_rhel_mapping:
        10: 7.7
        13: 7.7
        14: 7.7
        15: 8.0
        16: 8.1
        16.1: 8.2
  tasks:
    - include_tasks: tasks/install_os.yml
      vars:        
        needed_os: "RHEL {{ osp_rhel_mapping[osp_release|float] }}"
        hypervisor_host: "{{ undercloud_hostname }}"
        hypervisor_password: "{{ ansible_ssh_pass }}"

    - name: list oc_instackenv_content
      shell: |
        echo "{{ oc_instackenv_content.nodes[item | int].pm_addr }}"
      with_sequence: 0-{{ (oc_instackenv_content.nodes|length - 1) }}
      register: host_list

    - name: Set the boot order to director mode (Dell)
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H {{ item.stdout }}  -u quads -p {{ chassis_password }} -i "{{ ansible_user_dir }}/badfish/config/idrac_interfaces.yml" -t director
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      with_items: "{{ host_list.results }}"
      when: lab_name in ['scale', 'alias'] and vendor is defined and vendor == "dell"
      retries: 5
      delay: 3
      register: result
      until: result.rc == 0

    - name: power cycle overcloud nodes (Dell)
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H {{ item.stdout }}  -u quads -p {{ chassis_password }} --power-cycle
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      with_items: "{{ host_list.results }}"
      when: lab_name in ['scale', 'alias'] and vendor is defined and vendor == "dell"

    - name: Check if stack user exists
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'echo success'
      register: test_user
      ignore_errors: true
      changed_when: false

    - name: check if stack user need to be created in undercloud
      set_fact:
        create_user: True
      when: test_user.stdout != "success"


- import_playbook: prepare_undercloud.yml
  when: hostvars['localhost']['create_user'] is defined
