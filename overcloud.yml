---
- hosts: undercloud
  gather_facts: yes
  tasks:
      # RHBZ 1756492
      - name: exclude ceph images
        lineinfile:
          path: /home/stack/containers-prepare-parameter.yaml
          insertafter: "- push_destination: true"
          line: '    excludes:'
        when: osp_release > 13
      - name: exclude ceph images
        lineinfile:
          path: /home/stack/containers-prepare-parameter.yaml
          insertafter: "    excludes:"
          line: '    - ceph'
        when: osp_release > 13
      - name: get tht version
        shell: |
          grep  "heat_template_version" /usr/share/openstack-tripleo-heat-templates/overcloud.j2.yaml | cut -d ':' -f2
        register: tht_version
      - name: set heat_template_version
        set_fact:
          heat_template_version: "{{ tht_version.stdout }}"
      - name: generate firstboot-nvme.yaml
        template:
          src: "firstboot-nvme.yaml.j2"
          dest: "/home/stack/firstboot-nvme.yaml"
        when: nvme is defined

- hosts: localhost
  gather_facts: yes
  tasks:
      - name: Set compute count fact
        set_fact:
            compute_count: "{{ compute_count|default(oc_instackenv_content.nodes|length - (controller_count|int)) }}"

      - name: get nodes
        shell: |
            source ~/stackrc
            openstack baremetal node list -f value -c UUID
        register: nodes_uuids
        changed_when: false
        delegate_to: "{{ groups.undercloud|first }}"
        vars:
          ansible_python_interpreter: "{{ python_interpreter }}"
          ansible_user: "stack"

      - block:
        - name: check registered nodes with requested node count
          debug:
            msg: "Less nodes {{ nodes_uuids.stdout_lines|length }} registered with ironic than requested {{ compute_count|int + controller_count|int }}. So we will be adjusting controller and compute count according to registered available nodes"
          when: nodes_uuids.stdout_lines|length < (compute_count|int + controller_count|int)

        - name: Adjust compute count
          set_fact:
            compute_count: "{{ compute_count|int - 1 }}"
          when: nodes_uuids.stdout_lines|length < (compute_count|int + controller_count|int)
          with_items: "{{ nodes_uuids }}"
        when: scale_compute_vms == true

      - name: fail when compute count is less than 1
        fail:
            msg: "Failing as compute count is less than 1"
        when: compute_count|int < 1

      - name: set nvme parameter_defaults
        vars:
          nvme_params: {
            NovaSchedulerDefaultFilters: ['RetryFilter','AvailabilityZoneFilter','ComputeFilter','ComputeCapabilitiesFilter','ImagePropertiesFilter','ServerGroupAntiAffinityFilter','ServerGroupAffinityFilter','PciPassthroughFilter'],
            NovaSchedulerAvailableFilters: ['nova.scheduler.filters.all_filters'],
            NovaSchedulerMaxAttempts: "{{ compute_count }}",
            NovaPCIPassthrough: [{
                vendor_id: "{{ nvme.vendor_id }}",
                product_id: "{{ nvme.product_id }}",
                address: "{{ nvme.address }}" }],
            ControllerExtraConfig: {
                "nova::pci::aliases": [{
                    name: 'nvme',
                    vendor_id: "{{ nvme.vendor_id }}",
                    product_id: "{{ nvme.product_id }}",
                    device_type: 'type-PCI'}]
            },
            ComputeExtraConfig: {
                "nova::pci::aliases": [{
                    name: 'nvme',
                    vendor_id: "{{ nvme.vendor_id }}",
                    product_id: "{{ nvme.product_id }}",
                    device_type: 'type-PCI'}]
             },
             ComputeKernelArgs: "intel_iommu=on iommu=pt",
          }
        set_fact:
          parameter_defaults: "{{ parameter_defaults|default({}) | combine(nvme_params) }}"
        when: nvme is defined

      - name: set resource_registry nvme parameters
        vars:
          res_reg: "{{ resource_registry|default([]) }}"
        set_fact:
          resource_registry: "{{ res_reg + ['OS::TripleO::NodeUserData=/home/stack/firstboot-nvme.yaml'] }}"
        when: nvme is defined

      - name: add tripleo_heat_templates to template
        set_fact:
          config_template: "{{ config_template | default({}) | combine({'tripleo_heat_templates': extra_templates}) }}"
        when: extra_templates is defined

      - name: add parameter_defaults to template
        set_fact:
          config_template: "{{ config_template | default({}) | combine({'custom_templates': {'parameter_defaults': parameter_defaults} }) }}"
        when: parameter_defaults is defined

      - name: copy template content to extra template file
        copy:
            dest: "{{ infrared_dir }}/plugins/tripleo-overcloud/vars/overcloud/templates/extra.yml"
            content: "{{ config_template | to_nice_yaml }}"
        when: config_template is defined

      # tripleo_heat_templates and resource_registry will define the files.
      # Check if these exist in the undercloud and copy them from jetpack/files
      # if they don't exist.
      - name: Enable overcloud deployment with extra user defined templates
        block:
          - name: Check if the templates exist on the undercloud
            stat:
              path: "{{ item }}"
            register: env_files
            loop: "{{ extra_templates }}"
            when: extra_templates is defined
            delegate_to: "{{ undercloud_hostname }}"
            vars:
              ansible_python_interpreter: "{{ python_interpreter }}"
              ansible_user: "stack"

          - name: Copy files to undercloud if they do not exist
            copy:
              src: "{{ item.item| basename }}"
              dest: "/home/stack/"
            loop: "{{ env_files.results }}"
            when: (extra_templates is defined) and (not item.stat.exists)
            delegate_to: "{{ undercloud_hostname }}"
            vars:
              ansible_python_interpreter: "{{ python_interpreter }}"
              ansible_user: "stack"
        when: (extra_templates is defined and extra_templates|length>0 and (not novaless_prov))

      - name: Enable overcloud deployment with resource registry templates
        block:
          - name: get filenames for resource registry
            vars:
              res_reg_files: []
            set_fact:
                res_reg_files: "{{ res_reg_files + [ item.split('=')[1] ] }}"
            when: "'OS::Heat::None' not in item"
            loop: "{{ resource_registry }}"

          - name: Check if the resource registry templates exist on the undercloud
            stat:
              path: "{{ item }}"
            register: registry_files
            loop: "{{ res_reg_files }}"
            when: res_reg_files is defined
            delegate_to: "{{ undercloud_hostname }}"
            vars:
              ansible_python_interpreter: "{{ python_interpreter }}"
              ansible_user: "stack"

          - name: Copy files to undercloud if they do not exist
            copy:
              src: "{{ item.item| basename }}"
              dest: "/home/stack/"
            loop: "{{ registry_files.results }}"
            when: (res_reg_files is defined) and (not item.stat.exists)
            delegate_to: "{{ undercloud_hostname }}"
            vars:
              ansible_python_interpreter: "{{ python_interpreter }}"
              ansible_user: "stack"
        when: ( resource_registry is defined and resource_registry|length > 0)

      - name: check neutron_backend defined
        set_fact:
          neutron_backend: "{{ (osp_release|int > 14) | ternary('ovn', 'ovs') }}"
        when: neutron_backend is not defined

      - name: set ovn facts
        set_fact:
          network_backend: 'geneve,vlan'
          network_type: '--network-ovn'
        when: neutron_backend == 'ovn'

      - name: set ovs facts
        set_fact:
          network_backend: 'vxlan'
          network_type: '--network-ovs'
        when: neutron_backend == 'ovs'

      - name: set extra template facts
        set_fact:
          oc_extra_templates: "--overcloud-templates {{ infrared_dir }}/plugins/tripleo-overcloud/vars/overcloud/templates/extra.yml"
        when: ( extra_templates is defined and extra_templates|length>0 ) or ( parameter_defaults is defined and parameter_defaults.keys()|length>0 )

      - name: set heat config facts
        set_fact:
          oc_heat_configs: "--config-heat {{ heat_configs | join(' --config-heat ') }}"
        when: ( heat_configs is defined and heat_configs|length>0 )

      # infrared is not using resource_registry passed through templates
      # and forcing us to use --config-resource cli option
      - name: set resource registry using infrared config resource
        set_fact:
          oc_config_resource: "--config-resource {{ resource_registry | join(' --config-resource ') }}"
        when: ( resource_registry is defined and resource_registry|length>0 )

      - name: prepare for nova-less provisioning
        block:
          - name: provisioning baremetal nodes
            include_tasks: tasks/provisioning_baremetal_nodes.yml
        when: novaless_prov

      - name: hybrid deployment params
        set_fact:
          hybrid_params: " --specific-node-ids true  --hybrid {{ overcloud_instackenv_path }}  --vbmc-host {{ hypervisor }} "
        when: scale_compute_vms == true

      - name: run tripleo-overcloud deploy
        shell: |
            source .venv/bin/activate
            infrared tripleo-overcloud -vvv --version {{ osp_release }} --deployment-timeout 240 --build {{ osp_puddle }}  --deployment-files {{ nic_configs }} --introspect no --tagging no --deploy yes --controller-nodes {{ controller_count }} --compute-nodes {{ compute_count }} {{ oc_extra_templates | default('') }} --network-protocol ipv4 --network-backend {{ network_backend }} {{ network_type }} true --public-network false {{ oc_heat_configs | default('') }} {{ oc_config_resource | default('') }} {{ hybrid_params | default('') }} > {{ log_directory }}/overcloud_deploy.log 2>&1
        args:
            chdir: "{{ infrared_dir }}"
